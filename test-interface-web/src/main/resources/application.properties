
#server.port=8091
## thymeleaf
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

## LocalDateTime序列化
spring.jackson.time-zone=GMT+8
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss

#spring.thymeleaf.check-template-location=true

#swagger-dubbo
swagger.dubbo.enable = true

#测试环境dubbo配置
dubbo.application.name=test-interface
dubbo.port = -1
//dubbo.registry.address=zookeeper://10.10.220.36:2181

dubbo.registry.address=zookeeper://midware.dev-private.perfma-inc.com:2181
dubbo.registry.protocol=zookeeper
dubbo.protocol.name=dubbo
dubbo.protocol.port=-1
dubbo.monitor.protocol=registry
dubbo.protocol.exchanger = RpcMockExchanger
dubbo.protocol.serialization=MockHessian2Serialization

#swagger.dubbo.application.groupId=com.deepoove
#swagger.dubbo.application.artifactId=dubbo-provider-springboot
#swagger.dubbo.application.version=2.0.2-SNAPSHOT


#http2.0
server.compression.enabled = true
server.http2.enabled = true

#https
server.port=8091
server.http.port=8092
server.ssl.enabled=true
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=123456
server.ssl.key-password=123456
server.ssl.key-store-type=JKS

#文件上传地址
#files.upload.path=D://images/
#files.upload.path.relative=/images/**




#redis
#集群模式
#spring.redis.cluster.nodes=10.10.220.36:8001
#spring.redis.cluster.nodes=192.168.111.153:6379
#spring.redis.cluster.timeout=1000
#spring.redis.cluster.max-redirects=3

spring.redis.com.example.test.dal.database=0
#spring.redis.host=10.10.220.36
spring.redis.host=midware.dev-private.perfma-inc.com
spring.redis.port=6379
#spring.redis.port=8001
spring.redis.password=Admin888.
spring.redis.lettuce.pool.max-active=8
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.max-wait=-1ms
spring.redis.lettuce.pool.min-idle=0
#哨兵模式
#spring.redis.sentinel.master= mymaster
#spring.redis.sentinel.nodes= 192.168.111.153:6379
spring.redis.timeout= 1000


#上传文件大小配置
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=100MB

#MyBits 驼峰命名匹配
mybatis.configuration.map-underscore-to-camel-case = true

#OPTIONS  http协议类型 支持
#spring.mvc.dispatch-options-request=true


###########【Kafka集群】###########
spring.kafka.bootstrap-servers=midware.dev-private.perfma-inc.com:9092
###########【初始化生产者配置】###########
# 重试次数
spring.kafka.producer.retries=0
# 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
spring.kafka.producer.acks=all
# 批量大小
spring.kafka.producer.batch-size=16384
# 提交延时
spring.kafka.producer.properties.linger.ms=0
# 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
# linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了

# 生产端缓冲区大小
spring.kafka.producer.buffer-memory = 33554432
# Kafka提供的序列化和反序列化类
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# 自定义分区器
# spring.kafka.producer.properties.partitioner.class=com.felix.kafka.producer.CustomizePartitioner

###########【初始化消费者配置】###########
# 默认的消费组ID
spring.kafka.consumer.properties.group.id=testtpoic
# 是否自动提交offset
spring.kafka.consumer.enable-auto-commit=true
# 提交offset延时(接收到消息后多久提交offset)
spring.kafka.consumer.auto.commit.interval.ms=1000
# 当kafka中没有初始offset或offset超出范围时将自动重置offset
# earliest:重置为分区中最小的offset;
# latest:重置为分区中最新的offset(消费分区中新产生的数据);
# none:只要有一个分区不存在已提交的offset,就抛出异常;
spring.kafka.consumer.auto-offset-reset=latest
# 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
spring.kafka.consumer.properties.session.timeout.ms=120000
# 消费请求超时时间
spring.kafka.consumer.properties.request.timeout.ms=180000
# Kafka提供的序列化和反序列化类
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# 消费端监听的topic不存在时，项目启动会报错(关掉)
spring.kafka.listener.missing-topics-fatal=false
# 设置批量消费
# spring.kafka.listener.type=batch
# 批量消费每次最多消费多少条消息
# spring.kafka.consumer.max-poll-records=50

